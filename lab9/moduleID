//new_pc comes from add of IF module
module stageID(clk_ID, instruction, new_pc, wb_data, new_pc_carried, rd1, rd2, immediate, rx, ry);

    input clk_ID, instruction, new_pc, wb_data;
    output new_pc_carried, rd1, rd2, immediate;
    output rx, ry;  //these are forwarded; TODO: change to rs,rd,rt

    wire write_reg;

    wire handle_rtype;

    //R-Type: rs,rt,rd; rd is the write register
    //I-type: rs,rt,imm; rt is the write register

    // rx, ry are used to get
    register reg(
        .readReg1(instruction[25:20]),
        .readReg2(instruction[20:16]),
        .writeReg(write_reg),
        .writeData(wb_data),  //i.e. data to write
        .readData1(rd1),
        .readData2(rd2)
    );

    left_sign_ext sx(
        .in_bits(instruction[15:0]),
        .to_length(32),
        .out_bits(immediate)
    );

    mux is_rtype(
        .if_active(instruction[20:16]), //i.e. if R-Type, rd=20:16
        .default(instruction[15:11]),   //i.e. if I-type, rt=15:11
        .active(handle_rtype),
        .output(write_reg)
    );

    // will add more outputs when necessary
    control ctrl(
        .opcode(instructions[31:26])
        .regDest(handle_rtype)
    );

    always @(posedge clk) begin
        //assign to outputs that aren't outputs in any of the modules above
        rx <= instruction[25:20];
        ry <= instruction[20:16];
        new_pc_carried <= new_pc;
    end

endmodule


module register(readReg1, readReg2, first_address, writeReg, writeData, readData1, readData2);

    input readReg1, readReg2, first_address, writeReg, writeData;
    output readData1, readData2;

    // no values until
    integer R[99:0];

    always @(readReg1, readReg2, writeReg, writeData) begin

        readData1 <= R[readReg1];
        readData2 <= R[readReg2];

        if (writeData) R[(writeReg - first_address) / 4] <= writeData;

    end

endmodule


module left_sign_ext(in_bits, to_length, out_bits);

    input in_bits, to_length;
    output out_bits;

    assign out_bits <= in_bits | to_length'h00;

endmodule


// will be more outputs when necessary
module control(opcode, regDest);

    input opcode;
    output regDest;

    always @(opcode) begin

        if (opcode = 6'b0) begin
            regDest <= 1;
        end

        // I-type; division by 2^n truncates n digits
        else if (opcode != 6'b0 & opcode / 2 != 5'b00001 & opcode / 4 != 4'b0100) begin
            regDest <= 0;
        end

    end

endmodule
